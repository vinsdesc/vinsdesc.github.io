!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n():"function"==typeof define&&define.amd?define(n):n()}(0,function(){"use strict";var e=function(n){var t=this.constructor;return this.then(function(e){return t.resolve(n()).then(function(){return e})},function(e){return t.resolve(n()).then(function(){return t.reject(e)})})},n=setTimeout;function o(){}function a(e){if(!(this instanceof a))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],u(e,this)}function i(t,o){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,a._immediateFn(function(){var e=1===t._state?o.onFulfilled:o.onRejected;if(null!==e){var n;try{n=e(t._value)}catch(e){return void r(o.promise,e)}s(o.promise,n)}else(1===t._state?s:r)(o.promise,t._value)})):t._deferreds.push(o)}function s(n,e){try{if(e===n)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var t=e.then;if(e instanceof a)return n._state=3,n._value=e,void l(n);if("function"==typeof t)return void u((o=t,i=e,function(){o.apply(i,arguments)}),n)}n._state=1,n._value=e,l(n)}catch(e){r(n,e)}var o,i}function r(e,n){e._state=2,e._value=n,l(e)}function l(e){2===e._state&&0===e._deferreds.length&&a._immediateFn(function(){e._handled||a._unhandledRejectionFn(e._value)});for(var n=0,t=e._deferreds.length;n<t;n++)i(e,e._deferreds[n]);e._deferreds=null}function c(e,n,t){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof n?n:null,this.promise=t}function u(e,n){var t=!1;try{e(function(e){t||(t=!0,s(n,e))},function(e){t||(t=!0,r(n,e))})}catch(e){if(t)return;t=!0,r(n,e)}}a.prototype.catch=function(e){return this.then(null,e)},a.prototype.then=function(e,n){var t=new this.constructor(o);return i(this,new c(e,n,t)),t},a.prototype.finally=e,a.all=function(n){return new a(function(o,i){if(!n||void 0===n.length)throw new TypeError("Promise.all accepts an array");var a=Array.prototype.slice.call(n);if(0===a.length)return o([]);var s=a.length;function r(n,e){try{if(e&&("object"==typeof e||"function"==typeof e)){var t=e.then;if("function"==typeof t)return void t.call(e,function(e){r(n,e)},i)}a[n]=e,0==--s&&o(a)}catch(e){i(e)}}for(var e=0;e<a.length;e++)r(e,a[e])})},a.resolve=function(n){return n&&"object"==typeof n&&n.constructor===a?n:new a(function(e){e(n)})},a.reject=function(t){return new a(function(e,n){n(t)})},a.race=function(i){return new a(function(e,n){for(var t=0,o=i.length;t<o;t++)i[t].then(e,n)})},a._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){n(e,0)},a._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};var t=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}();t.Promise?t.Promise.prototype.finally||(t.Promise.prototype.finally=e):t.Promise=a});var Geohash={base32:"0123456789bcdefghjkmnpqrstuvwxyz",encode:function(e,n,t){if(void 0===t){for(var o=1;o<=12;o++){var i=Geohash.encode(e,n,o),a=Geohash.decode(i);if(a.lat==e&&a.lon==n)return i}t=12}if(e=Number(e),n=Number(n),t=Number(t),isNaN(e)||isNaN(n)||isNaN(t))throw new Error("Invalid geohash");for(var s=0,r=0,l=!0,c="",u=-90,d=90,p=-180,f=180;c.length<t;){if(l){var g=(p+f)/2;g<=n?(s=2*s+1,p=g):(s*=2,f=g)}else{var h=(u+d)/2;h<=e?(s=2*s+1,u=h):(s*=2,d=h)}l=!l,5==++r&&(c+=Geohash.base32.charAt(s),s=r=0)}return c},decode:function(e){var n=Geohash.bounds(e),t=n.sw.lat,o=n.sw.lon,i=n.ne.lat,a=n.ne.lon,s=(t+i)/2,r=(o+a)/2;return s=s.toFixed(Math.floor(2-Math.log(i-t)/Math.LN10)),r=r.toFixed(Math.floor(2-Math.log(a-o)/Math.LN10)),{lat:Number(s),lon:Number(r)}},bounds:function(e){if(0===e.length)throw new Error("Invalid geohash");e=e.toLowerCase();for(var n=!0,t=-90,o=90,i=-180,a=180,s=0;s<e.length;s++){var r=e.charAt(s),l=Geohash.base32.indexOf(r);if(-1==l)throw new Error("Invalid geohash");for(var c=4;0<=c;c--){var u=l>>c&1;if(n){var d=(i+a)/2;1==u?i=d:a=d}else{var p=(t+o)/2;1==u?t=p:o=p}n=!n}}return{sw:{lat:t,lon:i},ne:{lat:o,lon:a}}},adjacent:function(e,n){if(e=e.toLowerCase(),n=n.toLowerCase(),0===e.length)throw new Error("Invalid geohash");if(-1=="nsew".indexOf(n))throw new Error("Invalid direction");var t=e.slice(-1),o=e.slice(0,-1),i=e.length%2;return-1!={n:["prxz","bcfguvyz"],s:["028b","0145hjnp"],e:["bcfguvyz","prxz"],w:["0145hjnp","028b"]}[n][i].indexOf(t)&&""!==o&&(o=Geohash.adjacent(o,n)),o+Geohash.base32.charAt({n:["p0r21436x8zb9dcf5h7kjnmqesgutwvy","bc01fg45238967deuvhjyznpkmstqrwx"],s:["14365h7k9dcfesgujnmqp0r2twvyx8zb","238967debc01fg45kmstqrwxuvhjyznp"],e:["bc01fg45238967deuvhjyznpkmstqrwx","p0r21436x8zb9dcf5h7kjnmqesgutwvy"],w:["238967debc01fg45kmstqrwxuvhjyznp","14365h7k9dcfesgujnmqp0r2twvyx8zb"]}[n][i].indexOf(t))},neighbours:function(e){return{n:Geohash.adjacent(e,"n"),ne:Geohash.adjacent(Geohash.adjacent(e,"n"),"e"),e:Geohash.adjacent(e,"e"),se:Geohash.adjacent(Geohash.adjacent(e,"s"),"e"),s:Geohash.adjacent(e,"s"),sw:Geohash.adjacent(Geohash.adjacent(e,"s"),"w"),w:Geohash.adjacent(e,"w"),nw:Geohash.adjacent(Geohash.adjacent(e,"n"),"w")}}};"undefined"!=typeof module&&module.exports&&(module.exports=Geohash),function(h){var o={fr:{FRA:"France",BEL:"Belgique",ESP:"Espagne",UNKNOWN_POSITION:"Position inconnue",DESC_IP_DISQUALIFIED:"Selon votre IP disqualifiée",DESC_IP_QUALIFIED:"Selon votre IP qualifiée",DESC_HTML5:"Selon la position de votre appareil",DESC_MANUAL:"Selon votre position encodée manuellement",RELOCATION:'<button class="pxs-link">Rafra&icirc;chissez</button> ou <button class="pxs-link">modifiez votre position</button>',MORE_INFO:"Plus d'infos",POSITION_BLOCKED:"Votre navigateur bloque actuellement la géolocalisation.",CLOSE:"Fermer",DETAIL:"Détail"},nl:{FRA:"Frankrijk",BEL:"België",ESP:"Spanje",UNKNOWN_POSITION:"Onbekende positie",DESC_IP_DISQUALIFIED:"Volgens uw gediskwalificeerd IP",DESC_IP_QUALIFIED:"Volgens uw gekwalificeerd IP",DESC_HTML5:"Volgens de lokalisatie van uw toestel",DESC_MANUAL:"Volgens de lokalisatie dat uw manueel heeft gecodeerde",RELOCATION:'<button class="pxs-link">Update</button> of <button class="pxs-link">verander uw lokalisatie</button>',MORE_INFO:"Meer info",POSITION_BLOCKED:"Uw navigator blokkeert momenteel de geolokalisatie.",CLOSE:"Sluiten",DETAIL:"Detail"},es:{FRA:"Francia",BEL:"Bélgica",ESP:"España",UNKNOWN_POSITION:"Posición desconocida",DESC_IP_DISQUALIFIED:"Según su IP descalificada",DESC_IP_QUALIFIED:"Según su IP calificada",DESC_HTML5:"Según la posición de su dispositivo",DESC_MANUAL:"Según su posición codificada manualmente",RELOCATION:'<button class="pxs-link">Refrescar</button> o <button class="pxs-link">modificar su posición</button>',MORE_INFO:"Más información",POSITION_BLOCKED:"Tu navegador está actualmente bloqueando la geolocalización.",CLOSE:"Cerca",DETAIL:"Detalle"},en:{FRA:"France",BEL:"Belgium",ESP:"Spain",UNKNOWN_POSITION:"Unknown position",DESC_IP_DISQUALIFIED:"Based on your disqualified IP",DESC_IP_QUALIFIED:"From your qualified IP",DESC_HTML5:"From your device position",DESC_MANUAL:"From your manually encoded location",RELOCATION:'<button class="pxs-link">Refresh</button> or <button class="pxs-link">update your location</button>',MORE_INFO:"More info",POSITION_BLOCKED:"Your browser is currently blocking the position.",CLOSE:"Close",DETAIL:"Detail"}};function O(e,n){var t=h.config().language;return o[t]||(t="en"),o[t][e]||n||""}function n(e){var n=document.getElementById(e);if(null!=n){var t,o,i,a,s,r,m=e+"-country",v=e+"-location",y=e+"-descr",l=e+"-reloc",E=e+"-more",c=e+"-modal",u=e+"-modal-iframe",d=h.config().customClassName||"pxs-custom-"+(2<=(t=window.location.hostname.split(".")).length?t[t.length-2]+"-"+t[t.length-1]:t[0]),p="px-toolbar";h.config().darkTheme&&(d+=" pxs-theme-dark"),d,n.innerHTML='<div class="pxs-widget '+d+'"> <div id="'+c+'" class="pxs-modal">\n  <div class="pxs-modal-content">\n<span class="pxs-modal-close">\n  <svg viewport="0 0 12 12" version="1.1" xmlns="http://www.w3.org/2000/svg">\n    <line x1="1" y1="11" x2="11" y2="1" stroke="black" stroke-width="2"></line>\n    <line x1="1" y1="1" x2="11" y2="11" stroke="black" stroke-width="2"></line>\n  </svg>\n</span>\n    <iframe id="'+u+'" width="100%" height="500px" scrolling="no" frameBorder="0" src="'+h.config().apiRoot+"/assets/html/geolocation.html?language="+h.config().language+"&googleApiKey="+h.config().googleApiKey+'"></iframe>\n  </div>\n</div><span id="'+m+'" class="pxs-country"></span>\n    <div class="pxs-container">\n                <span id="'+v+'" class="pxs-location">\n                    <div class="pxs-dot">\n                        <svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 303.68 469.22">\n                           <g class="Calque_2" data-name="Calque 2">\n                                <g class="Layer_1" data-name="Layer 1">\n                                    <path class="pxs-ip" d="M151.83,469.22a13,13,0,0,1-12.68-10L99.43,294.36a151.1,151.1,0,0,1-17.26-7.61,148.42,148.42,0,0,1-22.55-14.31,151.83,151.83,0,1,1,199.59-228,152.06,152.06,0,0,1,38.09,151,154.42,154.42,0,0,1-8.9,22.76,152.79,152.79,0,0,1-84.16,76.1L164.51,459.25A13,13,0,0,1,151.83,469.22Zm0-441A123.69,123.69,0,0,0,95.14,261.7a125.85,125.85,0,0,0,20.33,8.3,14.08,14.08,0,0,1,9.43,9.54l26.93,111.8,26.78-111.15c0-.06.19-.72.2-.78a13,13,0,0,1,8.89-9.26,123.43,123.43,0,0,0,87.74-117.6c0-.24,0-.47,0-.71s0-.48,0-.72A123.65,123.65,0,0,0,151.83,28.22Z"\n                                    />\n                                    <path class="pxs-ip" d="M151.83,207.16a56,56,0,1,1,56-55.95A56,56,0,0,1,151.83,207.16Zm0-85.82a29.87,29.87,0,1,0,29.87,29.87A29.9,29.9,0,0,0,151.83,121.34Z"\n                                    />\n                                </g>\n                            </g>\n                        </svg>\n                    </div>\n                </span>\n        <span class="pxs-sep">-</span>\n        <span id="'+y+'" class="pxs-desc"></span>\n        <span class="pxs-sep">-</span>\n        <span id="'+l+'" class="pxs-reloc"></span>\n        <span class="pxs-sep">-</span>\n        <a href="//proxistore.com/geolocation" class="pxs-link" target="_blank" id="'+E+'" class="pxs-more"></a>\n    </div>',-1<h.config().shortWidgetIds.indexOf(e)&&null!==navigator.userAgent.match(/Android|(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|bolt|cldc|compal|doris|elaine|fennec|gobrowser|hiptop|htc|huawei|iemobile|ip(hone|od|ad)|iris|kindle|lge |lumia|nokia|maemo|mib|midp|minimo|mmp|model-orange|netfront|nexus \d+|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|playbook|plucker|pocket|psp|qnx|semc-browser|series(4|6)0|Silk|skyfire|symb(ian|ianos|os)|teashark|teleca|treo|up\.(browser|link)|uzard|wap|windows (ce|phone)|xda|xiino/i)&&(n.innerHTML=n.innerHTML.replace("pxs-widget","pxs-widget pxs-mini")),(r=document.getElementById(c)).getElementsByClassName("pxs-modal-close")[0].onclick=function(){r.style.display="none",h.em.publish(h.em.GEOLOCATION_REQUESTED,{})},window.onclick=function(e){document.getElementsByTagName("body"),e.target===r&&(r.style.display="none",h.em.publish(h.em.GEOLOCATION_REQUESTED,{}))},document.getElementById(u).addEventListener("load",function e(){document.getElementById(u).removeEventListener("load",e),null!=o&&I(o,i)},!1),h.em.subscribe(h.em.GEOLOCATION_CHANGED,function(e){var n,t,o,i,a,s=O(e.countryIso3,e.country),r=(e.postalCode||"")+" "+(e.locality||""),l="",c=O("RELOCATION"),u=O("POSITION_BLOCKED"),d=O("DETAIL"),p=O("CLOSE"),f=O("MORE_INFO"),g=null,h=!1;"IP"===e.type?e.disqualified?(r=O("UNKNOWN_POSITION"),l=O("DESC_IP_DISQUALIFIED"),x("pxs-ip-disqualified")):(l=O("DESC_IP_QUALIFIED"),x("pxs-ip-qualified"),g=e.position):"HTML5"===e.type?(l=O("DESC_HTML5"),x("pxs-html5"),g=e.position,h=!0):"MANUAL"===e.type?(l=O("DESC_MANUAL"),x("pxs-manual"),g=e.position,h=!0):(r=O("UNKNOWN_POSITION"),x("pxs-unknown")),I(g,h),n=s,document.getElementById(m).textContent=n,t=r,(o=document.getElementById(v).childNodes)[o.length-1].nodeValue=t,i=l,document.getElementById(y).textContent=i,b(c),a=f,document.getElementById(E).textContent=a,w(u,d,p)}),h.em.subscribe(h.em.GEOLOCATION_ERROR,function(e){a&&"flex"!==a.style.display&&"pxs-slideOutRightcanShow"===a.className&&(a.classList.remove("pxs-slideOutRightcanShow"),a.className+="pxs-slideOutRight",s=setTimeout(g,5e3),a.style.display="flex",a.classList.replace("pxs-slideOutRight","pxs-slideInRight"))})}function b(e){document.getElementById(l).innerHTML=e,document.getElementById(l).getElementsByTagName("button")[0].onclick=function(){document.getElementById("px-toolbar").className+="canShow",h.em.publish(h.em.GEOLOCATION_REQUESTED,{forceHtml5:!0})},document.getElementById(l).getElementsByTagName("button")[1].onclick=function(){document.getElementById(c).style.display="block",f("set-focus-on-input",null)}}function I(e,n){f("update-map-center",{position:o=e,showMarker:i=n})}function f(e,n){var t=document.getElementById(u).contentWindow,o=new MessageChannel;t.postMessage({type:e,data:n},"*",[o.port2])}function w(e,n,t){if(!document.getElementById(p)){var o=document.createElement("div");o.setAttribute("id",p),o.setAttribute("class","pxs-slideOutRight"),o.innerHTML='    <?xml version="1.0" encoding="iso-8859-1"?>\n    \x3c!-- Generator: Adobe Illustrator 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\x3e\n    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="120 -220 100 730" width="60px" height="45px">\n        <g>\n            <g>\n                <path d="M467.819,431.851l-36.651-61.056c-16.896-28.181-25.835-60.437-25.835-93.312V224    c0-82.325-67.008-149.333-149.333-149.333S106.667,141.675,106.667,224v53.483c0,32.875-8.939,65.131-25.835,93.312    l-36.651,61.056c-1.984,3.285-2.027,7.403-0.149,10.731c1.899,3.349,5.461,5.419,9.301,5.419h405.333    c3.84,0,7.403-2.069,9.301-5.419C469.845,439.253,469.803,435.136,467.819,431.851z M72.171,426.667l26.944-44.907    C118.016,350.272,128,314.219,128,277.483V224c0-70.592,57.408-128,128-128s128,57.408,128,128v53.483    c0,36.736,9.984,72.789,28.864,104.277l26.965,44.907H72.171z" fill="#91DC5A"/>\n            </g>\n        </g>\n        <g>\n            <g>\n                <path d="M256,0c-23.531,0-42.667,19.136-42.667,42.667v42.667C213.333,91.221,218.112,96,224,96s10.667-4.779,10.667-10.667    V42.667c0-11.776,9.557-21.333,21.333-21.333s21.333,9.557,21.333,21.333v42.667C277.333,91.221,282.112,96,288,96    s10.667-4.779,10.667-10.667V42.667C298.667,19.136,279.531,0,256,0z" fill="#91DC5A"/>\n            </g>\n        </g>\n        <g>\n            <g>\n                <path d="M302.165,431.936c-3.008-5.077-9.515-6.741-14.613-3.819c-5.099,2.987-6.805,9.536-3.819,14.613    c2.773,4.715,4.288,10.368,4.288,15.936c0,17.643-14.357,32-32,32c-17.643,0-32-14.357-32-32c0-5.568,1.515-11.221,4.288-15.936    c2.965-5.099,1.259-11.627-3.819-14.613c-5.141-2.923-11.627-1.259-14.613,3.819c-4.715,8.064-7.211,17.301-7.211,26.731    C202.667,488.085,226.581,512,256,512s53.333-23.915,53.376-53.333C309.376,449.237,306.88,440,302.165,431.936z" fill="#91DC5A"/>\n            </g>\n        </g>\n    </svg>\n    <p>'+e+'</p>\n    <ul id="px-toolbar-menu">\n        <li>'+t+'</li>\n <li><a href="https://www.proxistore.com/geolocation?lang='+h.config().language+'" target="_blank" >'+n+"</a></li>\n    </ul>\n</div>",document.body.appendChild(o),a=document.getElementById(p),document.getElementById("px-toolbar-menu").children[0].onclick=function(){a.style.display="none"},a.onmouseover=function(){this.children[2].style.display="flex",clearTimeout(s)},a.onmouseout=function(){this.children[2].style.display="none",s=setTimeout(g,2e3)}}}function g(){a.classList.replace("pxs-slideInRight","pxs-slideOutRight"),setTimeout(void(a.style.display="none"),1e3)}function x(e){for(var n=document.getElementById(v).getElementsByTagName("div")[0].getElementsByTagName("svg")[0].getElementsByTagName("g")[0].getElementsByTagName("g")[0].getElementsByTagName("path"),t=0;t<n.length;t++)n[t].setAttribute("class",e)}}function t(e){n(e)}var i=h.config;h.config=function(e){var n=i(e);return e&&(h.config().widgetIds&&Array.isArray(h.config().widgetIds)&&0<h.config().widgetIds.length&&("function"==typeof h.config().geoLocationCallback&&h.em.subscribe(h.em.GEOLOCATION_CHANGED,function(e){var n={type:e.type,locality:e.locality,postalCode:e.postalCode,countryIso2:e.countryIso2,countryIso3:e.countryIso3,country:e.country,disqualified:e.disqualified};h.config().geoLocationCallback(n)}),h.config().widgetIds.forEach(function(e){new t(e)})),h.em.publish(h.em.GEOLOCATION_REQUESTED,{})),n}}((Proxistore=function(r){Object.defineProperty(r.em,"GEOLOCATION_CHANGED",{value:"GEOLOCATION_CHANGED",writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(r.em,"GEOLOCATION_ERROR",{value:"GEOLOCATION_ERROR",writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(r.em,"GEOLOCATION_REQUESTED",{value:"GEOLOCATION_REQUESTED",writable:!1,enumerable:!0,configurable:!1});var l=new r.Ajax;function t(e,n,t,o,i,a,s,r){this.type=e,this.locality=n,this.postalCode=t,this.countryIso2=o,this.countryIso3=i,this.country=a,this.disqualified=r,s&&(this.position=Geohash.decode(s))}return new function(){function i(o){navigator&&navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(e){var n,t;(n={latitude:e.coords.latitude,longitude:e.coords.longitude,accuracy:e.coords.accuracy},t=r.config().apiRootVersionedUrl+"/cookie/geo/html5?",Object.keys(n).forEach(function(e){t+=e+"="+n[e]+"&"}),t+="1=1",l.post(t)).then(function(e){var n;a(JSON.parse(e)),o&&(n=r.config().apiRootVersionedUrl+"/cookie/geo/manual",l.delete(n))},function(e){s(e)})},function(e){s(e)},{maximumAge:6e5,timeout:6e4,enableHighAccuracy:!1})}function a(e){var n=new t(e.geoCookieType,e.locality,e.postalCode,e.countryIso2,e.countryIso3,e.country,e.geoHash,e.disqualified);r.em.publish(r.em.GEOLOCATION_CHANGED,n)}function s(e){r.em.publish(r.em.GEOLOCATION_ERROR,e)}r.em.subscribe(r.em.GEOLOCATION_REQUESTED,function(e){var n,t,o;e.latitude&&e.longitude?(t=e,o=r.config().apiRootVersionedUrl+"/cookie/geo/manual?",Object.keys(t).forEach(function(e){o+=e+"="+t[e]+"&"}),o+="1=1",l.post(o)).then(function(e){a(JSON.parse(e))},function(e){s(e)}):e.forceHtml5?i(e.forceHtml5):(n=r.config().apiRootVersionedUrl+"/widget/geo",l.get(n)).then(function(e){var n=JSON.parse(e);a(n),r.config().disableHtml5GeoLocation||"IP"!==n.geoCookieType||i()},function(e){s(e)})})},r}((Proxistore=function(e){return e.Ajax=function(){function t(o,i,a){return new Promise(function(e,n){var t=new XMLHttpRequest;t.onreadystatechange=function(){t.readyState===XMLHttpRequest.DONE&&(200<=t.status&&t.status<300?e(t.responseText):n(Error(t.statusText)))},t.onerror=function(){n(Error("Network Error"))},t.withCredentials=!0,t.open(i,o,!0),t.setRequestHeader("Content-Type","application/json"),t.send(a)})}this.get=function(e){return t(e,"GET")},this.post=function(e,n){return t(e,"POST",n)},this.put=function(e,n){return t(e,"PUT",n)},this.delete=function(e,n){return t(e,"DELETE",n)}},e}((Proxistore=function(e){return e.em=new function(){var i={};this.publish=function(e,n){var t=i[e];0!=!!t&&t.forEach(function(e){e.call(this,n)})},this.subscribe=function(e,n){var t=i[e];0==!!t&&(t=i[e]=[]),-1===t.indexOf(n)&&t.push(n)},this.unsubscribe=function(e,n){var t=i[e];if(0!=!!t){var o=t.indexOf(n);-1!==o&&t.splice(o)}}},e}((Proxistore=function(e){"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(e,n){"use strict";if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),o=1;o<arguments.length;o++){var i=arguments[o];if(null!=i)for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(t[a]=i[a])}return t},writable:!0,configurable:!0});var n={apiRoot:"//abs.proxistore.com",apiVersion:"v3",language:"fr",disableHtml5GeoLocation:!1,googleApiKey:"AIzaSyDXpL2ODv3_7-x0WhiPmspBEnHdIRlBWo8",geoLocationCallback:new function(e){},darkTheme:!1,customClassName:null,widgetIds:[],shortWidgetIds:[],verbose:!1};n.apiRootUrl=n.apiRoot+"/"+n.language,n.apiRootVersionedUrl=n.apiRootUrl+"/"+n.apiVersion;var t=Object.assign({},n);return e.config=function(e){return e&&((t=Object.assign(t,e)).language.match("fr|nl|es")?t.apiRootUrl=t.apiRoot+"/"+t.language:t.apiRootUrl=t.apiRoot+"/"+n.language,t.apiRootVersionedUrl=t.apiRootUrl+"/"+t.apiVersion),t},e.log=function(){if(t.verbose){var e=Array.prototype.slice.call(arguments);e.splice(0,0,"PROXISTORE -"),console.log.apply(this,e)}},e}(Proxistore||{}))||{}))||{}))||{}))||{});var Proxistore=function(w){function a(e,n){n=-1===n.search("\\?")?n+"?ps_v="+(new Date).getTime():n+"&ps_v="+(new Date).getTime();var t=document.createElement("img"),o=r("src",n);t.setAttributeNode(o),e.appendChild(t)}function r(e,n){var t=document.createAttribute(e);return t.value=n,t}function x(e,n,t){var o=function(e,n){var t=document.getElementById(n),o=document.getElementById("ps-pixelCounter-"+e);if(null===o){o=document.createElement("div");var i=r("id","ps-pixelCounter-"+e);o.setAttributeNode(i);var a=r("class","ps-pixelCounter");o.setAttributeNode(a);var s=r("style","display:none");o.setAttributeNode(s),t.appendChild(o)}return o}(e,n);if(t.constructor!==Array)a(o,t);else for(var i=t.length;i--;)a(o,t[i])}function O(e,n,t){clearTimeout(window["ps_infoboxTimeout_"+e]);var o=document.getElementById("ps-infobox-"+e);o.style.width="horizontal"===n?0===o.clientWidth||t?"250px":0:0===o.clientWidth||t?"116px":0}return w.box=function(e,n,t,o){var i,a,s,r=new w.Ajax;null!==n?r.put(w.config().apiRootVersionedUrl+"/rtb/prebid/viewed?dealId="+n):void 0!==o&&r.put(o),i=w.config().apiRoot+"/assets/css/proxistore.min.css",a=document.createElement("link"),s=document.getElementsByTagName("head")[0]||document.documentElement,a.setAttribute("rel","stylesheet"),a.setAttribute("type","text/css"),a.setAttribute("href",i),s.insertBefore(a,s.firstChild);var l,c,u,d,p,f,g,h,m,v,y,E=e.publisherSpot.publisherSpotReferenceId,b="horizontal",I="<span id='ps-picto-"+E+"' class='ps-picto "+b+"'>   <svg viewBox='0 0 1500 1500' width='0'><path d='M750,1500a41.7,41.7,0,0,1-40.53-31.88L582.47,941a483.06,483.06,0,0,1-55.19-24.33,473.74,473.74,0,0,1-72.09-45.77C334.12,778.29,264.61,637.76,264.61,485.39c0-129.73,50.49-251.63,142.16-343.25S620.4,0,750,0s251.5,50.47,343.26,142.14,142.16,213.59,142.16,343.25A486.14,486.14,0,0,1,1215,625,486,486,0,0,1,917.5,941l-127,527.11A41.71,41.71,0,0,1,750,1500ZM750,90.22c-105.49,0-204.71,41.12-279.37,115.77S354.88,379.92,354.88,485.39c0,124,56.59,238.44,155.24,313.91a390.76,390.76,0,0,0,123.61,63.82c14.05,4.32,26.68,16.24,30.16,30.52L750,1251l85.59-355.32c0-.2.61-2.33.65-2.51a41.63,41.63,0,0,1,28.42-29.62c105.65-32.46,192.85-107.14,240.76-205.34A400.36,400.36,0,0,0,1128.56,599a396.35,396.35,0,0,0,16.58-111.32c0-.77-.07-1.52-.07-2.28s0-1.51.07-2.28A392.4,392.4,0,0,0,1029.39,206C954.71,131.34,855.49,90.22,750,90.22Z'/><path d='M750,662.25c-98.61,0-178.84-80.24-178.84-178.87S651.37,304.51,750,304.51s178.89,80.24,178.89,178.87S848.61,662.25,750,662.25Zm0-274.35a95.48,95.48,0,1,0,95.49,95.49A95.58,95.58,0,0,0,750,387.89Z'/></svg></span><span id='ps-infobox-"+E+"' class='ps-infobox "+b+"'>   <span class='ps-location "+b+"'>       <svg viewBox='0 0 109.32 109.32' width='0'><path d='M108.14,1.18a4,4,0,0,0-4.45-.84L2.41,44.5A4,4,0,0,0,2.9,52L45,64.34l12.29,42.08a4,4,0,0,0,3.61,2.89h.26a4,4,0,0,0,3.69-2.41L109,5.63A4,4,0,0,0,108.14,1.18Z'/></svg>       <a class='ps-city "+b+"' href='"+e.relocalisationUrl+"' target='_blank'>"+e.surferCityName+"</a>   </span>   <span class='ps-actions "+b+"'>       <a id='ps-store-"+E+"' class='ps-store "+b+"' target='_blank'>           <svg viewBox='0 0 525.16 525.16' width='0'><path d='M517.47,244.07,281.09,7.68a26.12,26.12,0,0,0-37,0L7.68,244.07a26.12,26.12,0,0,0,0,37L244.09,517.47a26.12,26.12,0,0,0,37,0L517.49,281.07C527.71,271.15,527.71,254.52,517.47,244.07ZM315,328.35V262.69H209.89v78.84H157.39V236.45a26.34,26.34,0,0,1,26.24-26.26H315V144.55l91.9,91.9Z'/></svg>       </a>   </span></span><a id='ps-ad-"+E+"' class='ps-ad "+b+"' target='_blank'>   <img id='ps-ad-img-"+E+"' class='ps-ad-img "+b+"'></a>";document.getElementById(t).innerHTML=I,l=E,c=t,u=e,d=document.getElementById(c),clearInterval(window["ps_interval_"+l]),d.style.width=u.width+"px",d.style.height=u.height+"px",document.getElementById("ps-ad-img-"+l).src=u.urlVisuals[0],document.getElementById("ps-ad-"+l).href=u.urlRedirection,1<u.urlVisuals.length&&(window["ps_visualIdx_"+l]=1,window["ps_interval_"+l]=setInterval(function(){document.getElementById("ps-ad-img-"+l).src=u.urlVisuals[window["ps_visualIdx_"+l]],window["ps_visualIdx_"+l]=(window["ps_visualIdx_"+l]+1)%u.urlVisuals.length},5e3)),u.urlPixelCounters||(u.urlPixelCounters=[""]),0<u.urlPixelCounters.length&&x(x,c,u.urlPixelCounters),p=E,f=document.getElementById("ps-picto-"+p),window["ps_infoboxTimeout_"+p]=setTimeout(function(){f.click(),window["ps_infoboxTimeout_"+p]=setTimeout(function(){f.click()},4e3)},1e3),g=e,h=function(){r.put(w.config().apiRootUrl+"/tags/click/"+e.advertisementId,JSON.stringify({publisherSpotReferenceId:e.publisherSpot.publisherSpotReferenceId,campaignId:e.campaignId}),"application/json; charset=utf-8")},document.getElementById("ps-ad-"+g.publisherSpot.publisherSpotReferenceId).addEventListener("click",h),m=e,v=function(){O(e.publisherSpot.publisherSpotReferenceId,b)},y=function(){O(e.publisherSpot.publisherSpotReferenceId,b,!0)},document.getElementById("ps-picto-"+m.publisherSpot.publisherSpotReferenceId).addEventListener("click",v),document.getElementById("ps-infobox-"+m.publisherSpot.publisherSpotReferenceId).addEventListener("mouseover",y)},w}(Proxistore||{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
